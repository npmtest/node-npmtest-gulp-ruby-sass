{"/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/test.js":"/* istanbul instrument in package npmtest_gulp_ruby_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/lib.npmtest_gulp_ruby_sass.js":"/* istanbul instrument in package npmtest_gulp_ruby_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_ruby_sass = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_ruby_sass = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-ruby-sass && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_ruby_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_ruby_sass\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_ruby_sass.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_ruby_sass.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_ruby_sass.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_ruby_sass.__dirname + '/lib.npmtest_gulp_ruby_sass.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/node_modules/gulp-ruby-sass/index.js":"'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar Readable = require('stream').Readable;\nvar assign = require('object-assign');\nvar convert = require('convert-source-map');\nvar dargs = require('dargs');\nvar eachAsync = require('each-async');\nvar glob = require('glob');\nvar gutil = require('gulp-util');\nvar osTmpdir = require('os-tmpdir');\nvar pathExists = require('path-exists');\nvar rimraf = require('rimraf');\nvar spawn = require('cross-spawn');\nvar logger = require('./lib/logger');\nvar utils = require('./lib/utils');\n\nvar emitErr = utils.emitErr;\nvar replaceLocation = utils.replaceLocation;\nvar createIntermediatePath = utils.createIntermediatePath;\n\nvar defaults = {\n\ttempDir: path.join(osTmpdir(), 'gulp-ruby-sass'),\n\tverbose: false,\n\tsourcemap: false,\n\temitCompileError: false\n};\n\nif (typeof process.getuid === 'function') {\n\tdefaults.tempDir += '-' + process.getuid();\n}\n\nfunction gulpRubySass(sources, options) {\n\tvar stream = new Readable({objectMode: true});\n\n\t// redundant but necessary\n\tstream._read = function () {};\n\n\toptions = assign({}, defaults, options);\n\n\t// alert user that `container` is deprecated\n\tif (options.container) {\n\t\tgutil.log(gutil.colors.yellow('The container option has been deprecated. Simultaneous tasks work automatically now!'));\n\t}\n\n\t// error if user tries to watch their files with the Sass gem\n\tif (options.watch || options.poll) {\n\t\temitErr(stream, '`watch` and `poll` are not valid options for gulp-ruby-sass. Use `gulp.watch` to rebuild your files on change.');\n\t}\n\n\t// error if user tries to pass a Sass option to sourcemap\n\tif (typeof options.sourcemap !== 'boolean') {\n\t\temitErr(stream, 'The sourcemap option must be true or false. See the readme for instructions on using Sass sourcemaps with gulp.');\n\t}\n\n\toptions.sourcemap = options.sourcemap === true ? 'file' : 'none';\n\toptions.update = true;\n\n\t// simplified handling of array sources, like gulp.src\n\tif (!Array.isArray(sources)) {\n\t\tsources = [sources];\n\t}\n\n\tvar matches = [];\n\tvar bases = [];\n\n\tsources.forEach(function (source) {\n\t\tmatches.push(glob.sync(source));\n\t\tbases.push(options.base || utils.calculateBase(source));\n\t});\n\n\t// log and return stream if there are no file matches\n\tif (matches[0].length < 1) {\n\t\tgutil.log('No files matched your Sass source.');\n\t\tstream.push(null);\n\t\treturn stream;\n\t}\n\n\tvar intermediateDir = createIntermediatePath(sources, matches, options);\n\tvar compileMappings = [];\n\tvar baseMappings = {};\n\n\tmatches.forEach(function (matchArray, i) {\n\t\tvar base = bases[i];\n\n\t\tmatchArray.filter(function (match) {\n\t\t\t// remove _partials\n\t\t\treturn path.basename(match).indexOf('_') !== 0;\n\t\t})\n\t\t.forEach(function (match) {\n\t\t\tvar dest = gutil.replaceExtension(\n\t\t\t\treplaceLocation(match, base, intermediateDir),\n\t\t\t\t'.css'\n\t\t\t);\n\t\t\tvar relative = path.relative(intermediateDir, dest);\n\n\t\t\t// source:dest mappings for the Sass CLI\n\t\t\tcompileMappings.push(match + ':' + dest);\n\n\t\t\t// store base values by relative file path\n\t\t\tbaseMappings[relative] = base;\n\t\t});\n\t});\n\n\tvar args = dargs(options, [\n\t\t'bundleExec',\n\t\t'watch',\n\t\t'poll',\n\t\t'tempDir',\n\t\t'verbose',\n\t\t'emitCompileError',\n\t\t'base',\n\t\t'container'\n\t]).concat(compileMappings);\n\n\tvar command;\n\n\tif (options.bundleExec) {\n\t\tcommand = 'bundle';\n\t\targs.unshift('exec', 'sass');\n\t}\n\telse {\n\t\tcommand = 'sass';\n\t}\n\n\t// plugin logging\n\tif (options.verbose) {\n\t\tlogger.verbose(command, args);\n\t}\n\n\tvar sass = spawn(command, args);\n\n\tsass.stdout.setEncoding('utf8');\n\tsass.stderr.setEncoding('utf8');\n\n\tsass.stdout.on('data', function (data) {\n\t\tlogger.stdout(stream, intermediateDir, data);\n\t});\n\n\tsass.stderr.on('data', function (data) {\n\t\tlogger.stderr(stream, intermediateDir, data);\n\t});\n\n\tsass.on('error', function (err) {\n\t\tlogger.error(stream, err);\n\t});\n\n\tsass.on('close', function (code) {\n\t\tif (options.emitCompileError && code !== 0) {\n\t\t\temitErr(stream, 'Sass compilation failed. See console output for more information.');\n\t\t}\n\n\t\tglob(path.join(intermediateDir, '**', '*'), function (err, files) {\n\t\t\tif (err) {\n\t\t\t\temitErr(stream, err);\n\t\t\t}\n\n\t\t\teachAsync(files, function (file, i, next) {\n\t\t\t\tif (fs.statSync(file).isDirectory() || path.extname(file) === '.map') {\n\t\t\t\t\tnext();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar relative = path.relative(intermediateDir, file);\n\t\t\t\tvar base = baseMappings[relative];\n\n\t\t\t\tfs.readFile(file, function (err, data) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\temitErr(stream, err);\n\t\t\t\t\t\tnext();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// rewrite file paths so gulp thinks the file came from cwd, not the\n\t\t\t\t\t// intermediate directory\n\t\t\t\t\tvar vinylFile = new gutil.File({\n\t\t\t\t\t\tcwd: process.cwd(),\n\t\t\t\t\t\tbase: base,\n\t\t\t\t\t\tpath: replaceLocation(file, intermediateDir, base)\n\t\t\t\t\t});\n\n\t\t\t\t\t// sourcemap integration\n\t\t\t\t\tif (options.sourcemap === 'file' && pathExists.sync(file + '.map')) {\n\t\t\t\t\t\t// remove sourcemap comment; gulp-sourcemaps will add it back in\n\t\t\t\t\t\tdata = new Buffer(convert.removeMapFileComments(data.toString()));\n\t\t\t\t\t\tvar sourceMapObject = JSON.parse(fs.readFileSync(file + '.map', 'utf8'));\n\n\t\t\t\t\t\t// create relative paths for sources\n\t\t\t\t\t\tsourceMapObject.sources = sourceMapObject.sources.map(function (sourcePath) {\n\t\t\t\t\t\t\tvar absoluteSourcePath = decodeURI(path.resolve(\n\t\t\t\t\t\t\t\t'/',\n\t\t\t\t\t\t\t\tsourcePath.replace('file:///', '')\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\treturn path.relative(base, absoluteSourcePath);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tvinylFile.sourceMap = sourceMapObject;\n\t\t\t\t\t}\n\n\t\t\t\t\tvinylFile.contents = data;\n\t\t\t\t\tstream.push(vinylFile);\n\t\t\t\t\tnext();\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t}, function () {\n\t\t\t\tstream.push(null);\n\t\t\t});\n\t\t});\n\t});\n\n\treturn stream;\n}\n\ngulpRubySass.logError = function (err) {\n\tvar message = new gutil.PluginError('gulp-ruby-sass', err);\n\tprocess.stderr.write(message + '\\n');\n\tthis.emit('end');\n};\n\ngulpRubySass.clearCache = function (tempDir) {\n\ttempDir = tempDir || defaults.tempDir;\n\trimraf.sync(tempDir);\n};\n\nmodule.exports = gulpRubySass;\n","/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/node_modules/gulp-ruby-sass/lib/logger.js":"'use strict';\nvar gutil = require('gulp-util');\nvar escapeStringRegexp = require('escape-string-regexp');\nvar emitErr = require('./utils').emitErr;\n\nvar logger = {};\n\n// Remove intermediate directory for more Sass-like logging\nlogger.prettifyDirectoryLogging = function (msg, intermediateDir) {\n\tvar escapedDir = escapeStringRegexp(intermediateDir);\n\treturn msg.replace(new RegExp(escapedDir + '/?', 'g'), './');\n};\n\n// TODO: Now that we've standardized on --update, remove parsing that only\n// applies to single, non update compilations.\n\nlogger.verbose = function (command, args) {\n\tgutil.log('Running command ' + command + ' ' + args.join(' '));\n};\n\nlogger.stdout = function (stream, intermediateDir, data) {\n\t// Bundler error: no Sass version found\n\tif (/bundler: command not found: sass/.test(data)) {\n\t\temitErr(stream, 'bundler: command not found: sass');\n\t}\n\t// Bundler error: Gemfile not found\n\telse if (/Could not locate Gemfile or .bundle\\/ directory/.test(data)) {\n\t\temitErr(stream, 'bundler: could not locate Gemfile or .bundle directory');\n\t}\n\t// Sass error: directory missing\n\telse if (/No such file or directory @ rb_sysopen/.test(data)) {\n\t\temitErr(stream, data.trim());\n\t}\n\t// Not an error: Sass logging\n\telse {\n\t\tdata = logger.prettifyDirectoryLogging(data, intermediateDir);\n\t\tdata = data.trim();\n\t\tgutil.log(data);\n\t}\n};\n\nlogger.stderr = function (stream, intermediateDir, data) {\n\tvar bundlerMissing = /Could not find 'bundler' \\((.*?)\\)/.exec(data);\n\tvar sassVersionMissing = /Could not find gem 'sass \\((.*?)\\) ruby'/.exec(data);\n\n\t// Ruby error: Bundler gem not installed\n\tif (bundlerMissing) {\n\t\temitErr(stream, 'ruby: Could not find \\'bundler\\' (' + bundlerMissing[1] + ').');\n\t}\n\t// Bundler error: no matching Sass version\n\telse if (sassVersionMissing) {\n\t\temitErr(stream, 'bundler: Could not find gem \\'sass (' + sassVersionMissing[1] + ')\\'.');\n\t}\n\t// Sass error: file missing\n\telse if (/No such file or directory @ rb_sysopen/.test(data)) {\n\t\temitErr(stream, data.trim());\n\t}\n\t// Not an error: Sass warnings, debug statements\n\telse {\n\t\tdata = logger.prettifyDirectoryLogging(data, intermediateDir);\n\t\tdata = data.trim();\n\t\tgutil.log(data);\n\t}\n};\n\nlogger.error = function (stream, err) {\n\tif (err.code === 'ENOENT') {\n\t\t// Spawn error: gems not installed\n\t\temitErr(stream, 'Gem ' + err.path + ' is not installed.');\n\t}\n\telse {\n\t\t// Other errors\n\t\temitErr(stream, err);\n\t}\n};\n\nmodule.exports = logger;\n","/home/travis/build/npmtest/node-npmtest-gulp-ruby-sass/node_modules/gulp-ruby-sass/lib/utils.js":"'use strict';\nvar path = require('path');\nvar glob = require('glob');\nvar glob2base = require('glob2base');\nvar gutil = require('gulp-util');\nvar md5Hex = require('md5-hex');\n\nexports.emitErr = function (stream, err) {\n\tstream.emit('error', new gutil.PluginError('gulp-ruby-sass', err));\n};\n\n// Create unique temporary directory path per task using cwd, options, sources,\n// and all matched files. Switching options does not break Sass cache so we do\n// it ourselves. Possibly a bug: https://github.com/sass/sass/issues/1830\nexports.createIntermediatePath = function (sources, matches, options) {\n\treturn path.join(\n\t\toptions.tempDir,\n\t\tmd5Hex(\n\t\t\tprocess.cwd() +\n\t\t\tJSON.stringify(sources) +\n\t\t\tJSON.stringify(matches) +\n\t\t\tJSON.stringify(options)\n\t\t)\n\t);\n};\n\nexports.calculateBase = function (source) {\n\treturn glob2base(new glob.Glob(source));\n};\n\nexports.replaceLocation = function (origPath, currentLoc, newLoc) {\n\treturn path.join(\n\t\tnewLoc,\n\t\tpath.relative(currentLoc, origPath)\n\t);\n};\n"}